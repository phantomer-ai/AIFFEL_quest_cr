# 문제 2-1. Kiosk 클래스를 생성합니다. 
# 커피 메뉴와 가격
coffee = ['americano', 'latte', 'mocha'] 
c_price = [2000, 3000, 3000]

# 논커피 메뉴와 가격
non_coffee = ['yuza_tea', 'green_tea', 'choco_latte']
n_price = [2500, 2500, 3000]

# 전체 메뉴와 가격 
menu = ['americano', 'latte', 'mocha', 'yuza_tea', 'green_tea', 'choco_latte']
price = [2000, 3000, 3000, 2500, 2500, 3000]

# 리스트 슬라이싱으로 논커피 메뉴와 해당가격 출력
non_coffee = menu[3:]
n_price = price[3:]

# print(menu[3:],price[3:])

class Kiosk:  
    def __init__(self):
        self.menu = menu
        self.price = price
        # 주문 내역을 저장할 리스트 초기화
        self.order_menu = []
        self.order_price = []
        self.price_sum = 0

    def menu_print(self):
        for i in range(len(self.menu)):
            print(i+1, self.menu[i], ' : ', self.price[i], '원')

    def menu_select(self):
        while True:
            try:
                n = int(input("음료의 번호를 입력하세요 : "))
                if 1 <= n <= len(self.menu):
                    # 온도 선택
                    t = 0
                    while t != 1 and t != 2:
                        t = int(input("HOT 음료는 1을, ICE 음료는 2를 입력하세요 : "))
                        if t == 1:
                            self.temp = "HOT"
                        elif t == 2:
                            self.temp = "ICE"
                        else:
                            print("1과 2 중 하나를 입력하세요.\n")
                    
                    # 주문 내역 추가
                    self.order_menu.append(f"{self.temp} {self.menu[n-1]}")
                    self.order_price.append(self.price[n-1])
                    self.price_sum = sum(self.order_price)
                    
                    print(f'주문 음료 {self.temp} {self.menu[n-1]} : {self.price[n-1]}원')
                    print(f'현재 합계: {self.price_sum}원')
                    
                    # 추가 주문 여부
                    more = input("추가 주문하시겠습니까? (y/n): ")
                    if more.lower() != 'y':
                        break
                else:
                    print("없는 메뉴입니다. 다시 주문해 주세요.")
            except ValueError:
                print("올바른 숫자를 입력해 주세요.")

a = Kiosk()

# 문제 2-3. 주문 메서드      

# 음료의 온도에 따라 temp 변수를 "HOT" 또는 "ICE"로 지정하세요.

class Kiosk: 
    def __init__(self):
        # 문제 2-1의 답을 입력하세요. 
        self.menu = menu
        self.price = price

    # 메뉴 출력 메서드
    def menu_print(self):
        for i in range(len(self.menu)):
            print(i + 1, self.menu[i], ' : ', self.price[i], '원')

    # 주문 메서드
    def menu_select(self):
        print()  # 줄 바꿈
        n = 0
        while n < 1 or len(menu) < n:
            n = int(input("음료 번호를 입력하세요 : "))  # 음료 번호 입력

            # 메뉴판에 있는 음료 번호일때
            if 1 <= n & n <= len(menu):
                self.price_sum = self.price[n-1]  # 선택 음료의 가격
        
            # 메뉴판에 없는 번호일 때
            else:  
                print("없는 메뉴입니다. 다시 주문해 주세요.")

        # 음료 온도 물어보기
        t = 0  # 기본값을 넣어주고
        while t != 1 and t != 2:  # 1이나 2를 입력할 때까지 물어보기
            t= int(input("HOT 음료는 1을, ICE 음료는 2를 입력하세요 : "))
            # 문제 2-3. 음료의 온도에 따라 temp 변수를 "HOT" 또는 "ICE"로 지정하세요.   
            # 힌트: if문을 활용해보세요.        
            if t == 1:
                self.temp = "HOT"
            elif t == 2:
                self.temp = "ICE"
            else:    
                print("1과 2 중 하나를 입력하세요.\n")
        # 문제 2-2의 답을 입력하세요. 
        print('주문 음료', self.temp, self.menu[n-1], ' : ', self.price_sum, '원') # 온도 속성을 추가한 주문 결과 출력
 
 # 추가 주문 또는 지불
        while n != 0:  # 지불을 선택하기 전까지 반복합니다.
            print()  # 줄 바꾸면서 
            n = int(input("추가 주문은 음료 번호를, 지불은 0을 누르세요 : "))  # 추가 주문 또는 지불
            if n > 0 and n < len(self.menu) + 1: 
            # 추가 음료 온도 
            # 문제 2-4. 추가 음료의 온도를 입력받고, 가격 리스트, 주문 리스트, 합계 금액을 업데이트해보세요.
                t = 0  # 기본값 설정
                while t != 1 and t != 2:  # 1이나 2를 입력할 때까지 반복
                    t = int(input("HOT 음료는 1을, ICE 음료는 2를 입력하세요 : "))
                    if t == 1:
                        self.temp = "HOT"
                    elif t == 2:
                        self.temp = "ICE" 
                    
                    else:
                    
                        print("1과 2 중 하나를 입력하세요.\n")
                    
            self.price_sum = self.price[n-1]
            self.order_menu = self.menu[n-1]
            self.order_price = self.price[n-1]

            print('추가 주문 음료', self.temp, self.order_menu, ':', self.order_price, '원\n', '합계 : ', self.price_sum, '원')
        else :
            if n == 0 :  # 지불을 입력하면
                print("주문이 완료되었습니다.")
                print(self.order_menu, self.order_price)  # 확인을 위한 리스트를 출력합니다.
            else :  # 없는 번호를 입력할 때
                print("없는 메뉴입니다. 다시 주문해 주세요.")

        
# 아이스 초코라떼 주문해보기  
# a = Kiosk()  # 객체 생성
# a.menu_print()  # 메뉴 출력
# a.menu_select()

# a = Kiosk()  # 객체 생성
# a.menu_print()  # 메뉴 출력
# a.menu_select()  # 주문

# 문제 3-1. 지불 메서드
# 위의 설명을 참고하여 pay 함수를 구현합니다. 
# 현금('cash' or 1) → '직원을 호출하겠습니다.'  
# 카드('card' or 2) → 'IC칩 방향에 맞게 카드를 꽂아주세요.'  
# [[YOUR CODE]]
def pay(self):
    p = 0
    while p != 1 and p != 2:  # 1이나 2를 입력할 때까지 반복
        p = int(input("현금은 1, 카드는 2를 입력하세요 : "))
        if p == 1:
            print("직원을 호출하겠습니다.")
        elif p == 2:
            print("IC칩 방향에 맞게 카드를 꽂아주세요.")
        else:
            print("1과 2 중 하나를 입력하세요.\n")
Kiosk.pay = pay  # pay 메서드를 Kiosk 클래스에 추가


# a = Kiosk()  # 객체 생성
# a.menu_print()  # 메뉴 출력
# a.menu_select()  # 주문
# a.pay()  # 지불


#문제 3-2. 주문표 메서드
def table(self):
    # 외곽
    print('⟝' + '-' * 30 + '⟞')
    for i in range(5):
        print('|' + ' ' * 31 + '|')

    # 주문 상품명 : 해당 금액 
    for i in range(len(self.order_menu)):
        print(self.order_menu[i], ' : ', self.order_price[i])

    print('합계 금액 :', sum(self.order_price))

    # 외곽
    for i in range(5):
        print('|' + ' ' * 31 + '|')
    print('⟝' + '-' * 30 + '⟞')

Kiosk.table = table  # table 메서드를 Kiosk 클래스에 추가

# a = Kiosk()  # 객체 생성
# a.menu_print()  # 메뉴 출력
# a.menu_select()  # 주문
# a.pay()  # 지불
# a.table()  # 주문표


# 문제 3-3. 클래스 업데이트  
# 앞에서 구현했던 메서드들을 Kiosk 클래스에 추가합니다. 

class Kiosk:
    def __init__(self):
        self.menu = menu

    # 메뉴 출력 메서드
    def menu_print(self):
        for i in range(len(self.menu)):
            print(i+1, self.menu[i], ' : ', self.price[i], '원')

    # 주문 메서드
    def menu_select(self):
        while True:
            try:
                n = int(input("음료의 번호를 입력하세요 : "))
                if 1 <= n <= len(self.menu):
                    self.price_sum = self.price[n-1]
                    print(self.menu[n-1], ' : ', self.price_sum, '원')
                    break
                else:
                    print("없는 메뉴입니다. 다시 주문해 주세요.")
            except ValueError:
                print("올바른 숫자를 입력해 주세요.")

    # 지불
    def pay(self):
        p = 0
        while p != 1 and p != 2:  # 1이나 2를 입력할 때까지 반복
            p = int(input("현금은 1, 카드는 2를 입력하세요 : "))
            if p == 1:
                print("직원을 호출하겠습니다.")
            elif p == 2:
                print("IC칩 방향에 맞게 카드를 꽂아주세요.")
            else:
                print("1과 2 중 하나를 입력하세요.\n")

    # 주문서 출력 
    def table(self):
        # 외곽
        print('⟝' + '-' * 30 + '⟞')
        for i in range(5):
            print('|' + ' ' * 31 + '|')

        # 주문 상품명 : 해당 금액 
        for i in range(len(self.order_menu)):
            print(self.order_menu[i], ' : ', self.order_price[i])

        print('합계 금액 :', sum(self.order_price))

        # 외곽
        for i in range(5):
            print('|' + ' ' * 31 + '|')
        print('⟝' + '-' * 30 + '⟞') 


# 메인 실행 코드
if __name__ == "__main__":
    kiosk = Kiosk()
    while True:
        print("\n=== 음료 주문 시스템 ===")
        kiosk.menu_print()
        kiosk.menu_select()
        kiosk.pay()
        kiosk.table()
        
        # 새로운 주문 받기
        retry = input("\n새로운 주문을 받으시겠습니까? (y/n): ")
        if retry.lower() != 'y':
            print("프로그램을 종료합니다.")
            break



a = Kiosk()  # 객체 생성 
a.menu_print()  # 메뉴 출력
a.menu_select()  # 주문
a.pay()  # 지불
a.table()  # 주문표 출력
