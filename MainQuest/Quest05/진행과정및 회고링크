와이어 프레임 , 
프레임 워크,
시행착오 
회고 링크입니다 https://www.notion.so/Main-quest-1b96eb728077801aa750f59ad24073bc?pvs=4

**🚀 MVP 버전 - 버스 점핑(Verse-Jumping) 앱 기획**

우선, **최소 기능 제품(MVP, Minimum Viable Product)** 형태로 간단한 앱을 먼저 만들어서 **기본적인 점프대 시스템과 연동을 테스트**해 보자.

**🎯 1. 기획 의도**

- everything everywhere all at once 영화에 영감을 받음
- 실제로 우리도 내 상식과 벗어나는 행동을 했을때 다른 차원으로 연결이 되는 점프대가 되지 않을까?
- 랜덤으로 점프대를 만들어서 수행하면 재밌겠다 !
- 사람들이랑 같이 해도 재밌겠다 !- > 벌칙처럼? → 그럼 보드게임으로 만들어도 재밌겠다! → 어플과 연동 되는 보드게임이면 좋겠다 !

- 과제 제출용 MVP :

**“멀티버스를 여행하려면 이상한 행동을 해야 한다!”**

•	**목적**: 사용자가 랜덤한 “이상한 행동(점프대)“을 수행하여 가상의 멀티버스를 이동하는 앱

•	**핵심 기능**:

•	무작위 점프대(이상한 행동) 생성

•	점프대 수행 여부 체크

•	벌칙 시스템

•	멀티버스 이동 (레벨업 요소)

최종 결과물,,,: 이상한 미션주는 어플

**📌 2. 주제 및 핵심 요소**

**🔹 주요 개념**

1.	**점프대 수행:** 랜덤으로 주어진 이상한 행동을 수행해야 이동 가능

2.	**멀티버스 이동:** 행동에 성공하면 새로운 차원으로 이동

3.	**벌칙 시스템:** 실패하면 페널티 적용

4.	**커뮤니티 요소 (확장 가능):** 친구들과 함께 플레이

**🗂 3. 정보 구조도 (Information Architecture)**

```
📱 메인 화면
│
├── 🌌 멀티버스 탐험 시작 (Start)
│    ├── 점프대 (이상한 행동) 생성
│    ├── 성공 / 실패 체크
│    ├── 성공 시 차원이동 (레벨업)
│    ├── 실패 시 벌칙 적용
│
├── 🔄 점프대 리롤 (새로운 행동 뽑기)
│
├── 🏆 내 기록 보기 (이동한 차원 목록)
│
└── ⚙ 설정 (사운드, 난이도 조절)
```

**🖌 4. 와이어프레임 (Wireframe)**

아래는 간단한 MVP 버전 와이어프레임이야. 🎨

각 화면별로 기본적인 UI 구성을 생각해 보자.

**📱 메인 화면**

```
+----------------------------------+
| 🚀 [버스 점핑 시작] 버튼         |
| 🌍 현재 차원: 핫도그 차원        |
| 🏆 내 점프 기록 보기 (선택)      |
| ⚙ 설정 (난이도 조절, 테마 선택) |
+----------------------------------+
```

✔ **기능**: 게임 시작 버튼, 현재 차원 표시, 기록 보기, 설정

**🎲 점프대 생성 화면**

```
+----------------------------------+
| 🎲 무작위 점프대 생성됨!         |
| "한 손으로 코 만지면서 점프 3회" |
| (⏳ 10초 안에 수행)              |
|                                  |
| ✅ [성공]  ❌ [실패]           |
| 🔄 [새로운 점프대 뽑기]         |
+----------------------------------+
```

✔ **기능**: 점프대 수행, 성공/실패 체크, 점프대 새로 뽑기

**🌌 차원 이동 화면**

```
+----------------------------------+
| 🎉 성공! 새로운 차원으로 이동   |
| 현재 차원: 핫도그 차원 -> 돌 차원 |
| 🏆 [다음 점프 수행] 버튼         |
+----------------------------------+
```

✔ **기능**: 성공하면 새로운 차원으로 이동

**❌ 벌칙 화면 (실패 시)**

```
+----------------------------------+
| 😵 점프대 실패! 벌칙 수행        |
| 벌칙: "손바닥 3번 때리기"        |
| 🔄 [벌칙 변경]                   |
| 🚀 [다시 도전] 버튼              |
+----------------------------------+
```

✔ **기능**: 벌칙 수행, 다시 도전

**✅ 최종 정리**

**MVP 핵심 기능**

•	🎲 **버스 점핑 (이상한 행동) 랜덤 생성**

•	🏆 **성공하면 멀티버스 이동**

•	❌ **실패하면 벌칙 적용**

•	📊 **기록 저장 (이동한 차원 보기)**

**확장 가능 요소**

•	🔥 **멀티플레이** (친구와 대결)

•	🎭 **차원별 특수 이벤트** (핫도그 차원에서는 손가락 못 쓰기)

•	🎵 **사운드 효과 및 애니메이션 추가**

이제 이걸 바탕으로 프로토타입을 만들면 될 것 같은데, 어떤 프레임워크로 만들까?

•	**React Native** (크로스플랫폼 앱)

•	**Flutter** (UI 깔끔함)

•	**Unity** (게임 요소 추가 용이)

선택하면 MVP 개발 들어가자! 🚀

![IMG_0077.jpeg](attachment:7f184b91-2579-44b0-a3e1-5f03051ba0fd:IMG_0077.jpeg)

[verse jumping game.pdf](attachment:0376d747-d4a6-43fb-aa79-def075ac3335:verse_jumping_game.pdf)

- 프롬프트를 제대로 입력하지 않으면 원하는대로 나오지 않음
- 프로토 타이핑도 프롬프트로 만드는 시대?

ㄴ 빠르게 진행이 가능해서 좋긴했지만 , 디테일 한 부분에서 미세한 조정은 힘들기 때문에 큰그림 잡을때만 ai를 사용하고 , 기존 툴을 익혀서 디테일을 조정해야겠다 

ㄴ 마찬가지로 코딩도 미세한 부분에서 자꾸 버그가 나고 오류가 나는데, 별거아닌 부분에서 오류가 잘나서 , 큰그림을 잡고 디테일은 - 자꾸 안해주는부분 틀리는 부분이 있다→ 미리 알고있어서 같은 방식으로 대처 

ex assets 파일 결로 설정 오류 , pubspec.yaml 파일 직접 수정 (간단) 

새로운 dart 페이지를 만들고 main 에 import 시키는걸 자꾸 까먹음 ,

- 코드 몇줄 수정하면 되는걸  아예 갈아엎어 버리는 경우가 많다 → 오히려 버그생김

ex) 중앙으로 정렬하고 싶을때, 그냥 위에 패딩만 주면되는데 center 라는 위젯을 새롭게 만들어 갈아 엎어버릴려고함  → 이런게 한두개가 아닐듯 ,

- 디테일하게 지시할수록 오류가 적다 → 많이 알아야함

Navigator 기능 향상 

Named 라우트(`routes`) 사용

1. 코드 가독성 향상 

```dart
// 기존 방식
Navigator.push(context, MaterialPageRoute(builder: (context) => ChallengePage()));

// Named 라우트 방식
Navigator.pushNamed(context, '/challenge');  // 더 간단하고 명확

```

1. **중앙 집중식 라우트 관리**

```dart
MaterialApp(
  routes: {
    '/': (context) => const MainPage(),
    '/challenge': (context) => const ChallengePage(),
    '/result': (context) => const ResultPage(),
    '/settings': (context) => const SettingsPage(),
  },
);

```

1. **딥링크 지원 용이**
- 앱 외부에서 특정 페이지로 직접 이동할 때 URL 패턴 매칭이 쉬움
1. **인증/권한 체크 구현 용이**

```dart
onGenerateRoute: (settings) {
  if (settings.name == '/challenge') {
    if (!isLoggedIn) return Navigator.pushNamed(context, '/login');
  }
  return null;
},

```

1. **파라미터 전달이 명확**

```dart
Navigator.pushNamed(
  context,
  '/challenge',
  arguments: {'difficulty': 'hard'},
);

```

앱이 커질수록 이러한 장점들이 더 중요해집니다.

라우트 사용으로  앱구조가 복잡해질수록 관리가 용이하게 변경 

`Padding` 값을 조정하고 `SizedBox` 높이를 줄여서 전체 콘텐츠를 위로 올리기

```dart
      body: Container(
        width: double.infinity,
        height: double.infinity,
        color: const Color(0xFF111827),
        child: Padding(
-         padding: const EdgeInsets.all(32.0),
+         padding: const EdgeInsets.fromLTRB(32.0, 16.0, 32.0, 32.0),  // 상단 패딩 감소
          child: Column(
            children: [
-             const SizedBox(height: 96),
+             const SizedBox(height: 60),  // 상단 여백 감소
              // 실패 메시지 섹션
              Column(
                children: [
                  const Icon(Icons.error_outline, size: 96, color: Colors.red),
-                 const SizedBox(height: 24),
+                 const SizedBox(height: 16),  // 간격 감소
                  const Text(
                    'Challenge Failed!',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
-                 const SizedBox(height: 8),
+                 const SizedBox(height: 4),  // 간격 감소
                  Text(
                    'The multiverse rejects your attempt!',
                    style: TextStyle(color: Colors.grey[300], fontSize: 18),
                  ),
                ],
              ),
-             const SizedBox(height: 32),
+             const SizedBox(height: 24),  // 간격 감소
              // 벌칙 카드

```

ApI 삽입

Gemini API 키를 안전하게 관리하면서 랜덤 벌칙을 생성하는 방법을 알려드리겠습니다:

1. 먼저 `.env` 파일을 만들어서 API 키를 관리합니다:

```
GEMINI_API_KEY=your_api_key_here

```

1. `pubspec.yaml`에 환경 변수 패키지를 추가합니다:

```yaml
dependencies:
  flutter_dotenv: ^5.1.0
  google_generative_ai: ^0.2.0
  http: ^1.2.0

```

1. `challenge_service.dart`를 수정하여 벌칙 생성 메서드를 추가합니다:

```dart
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:google_generative_ai/google_generative_ai.dart';

class ChallengeService {
  late final model = GenerativeModel(
    model: 'gemini-pro',
    apiKey: dotenv.env['GEMINI_API_KEY'] ?? '',
  );

  Future<String> getRandomPunishment() async {
    try {
      final prompt = '''
재미있는 벌칙 게임을 하나만 제안해주세요. 다음 조건을 만족해야 합니다:
- 10~30초 안에 할 수 있는 것
- 실내에서 가능한 것
- 재미있고 창의적인 것
- 한 문장으로 간단히 설명
''';

      final content = [Content.text(prompt)];
      final response = await model.generateContent(content);
      return response.text ?? '제자리 점프 20회 하기';
    } catch (e) {
      return '제자리 점프 20회 하기'; // 기본 벌칙
    }
  }
  // ... 기존 코드
}

```

1. `fail_page.dart`에서 벌칙을 동적으로 가져오도록 수정:

```dart
class FailPage extends StatefulWidget {
  const FailPage({super.key});

  @override
  State<FailPage> createState() => _FailPageState();
}

class _FailPageState extends State<FailPage> {
  final ChallengeService _challengeService = ChallengeService();
  String _punishment = '벌칙을 생성중입니다...';
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadPunishment();
  }

  Future<void> _loadPunishment() async {
    final punishment = await _challengeService.getRandomPunishment();
    setState(() {
      _punishment = punishment;
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    // ... 기존 코드에서 벌칙 텍스트 부분만 수정
    child: _isLoading
        ? const CircularProgressIndicator(color: Colors.white)
        : Text(
            _punishment,
            textAlign: TextAlign.center,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.w500,
            ),
          ),

```

1. `main.dart`에서 환경 변수를 로드:

```dart
void main() async {
  await dotenv.load(fileName: ".env");
  runApp(const MyApp());
}

```

이렇게 하면:

1. API 키가 안전하게 관리됨
2. 실패할 때마다 AI가 새로운 벌칙을 생성
3. API 호출 실패시 기본 벌칙으로 폴백

`.env` 파일은 `.gitignore`에 추가하여 Git에 커밋되지 않도록 해야 합니다.

백업용 

챌린지 서비스 페이지

```python
import 'package:google_generative_ai/google_generative_ai.dart';
import 'dart:convert';
import 'dart:math';
import 'package:flutter_dotenv/flutter_dotenv.dart';

// 챌린지 데이터 모델
class Challenge {
  final String title;
  final int seconds;

  Challenge({required this.title, required this.seconds});
}

// 챌린지 목록 (나중에 서버에서 가져올 데이터)
final List<Challenge> challenges = [Challenge(title: '발가락으로 코파기', seconds: 30)];

class ChallengeService {
  late final GenerativeModel model;

  ChallengeService() {
    final apiKey = dotenv.env['GEMINI_API_KEY'] ?? '';
    // print(
    //   'ChallengeService - API 키: ${apiKey.isEmpty ? "비어있음" : "${apiKey.substring(0, 5)}..."}',
    // );

    model = GenerativeModel(model: 'gemini-pro', apiKey: apiKey);
  }

  Future<Challenge> getRandomChallenge() async {
    try {
      final prompt =
          '재미있는 30초짜리 챌린지나 벌칙 게임을 하나만 제안해주세요. "title"과 "seconds"를 포함하여 JSON 형식으로 응답해주세요.';
      final content = [Content.text(prompt)];
      final response = await model.generateContent(content);

      // response.text가 null이 아닌지 확인
      final responseText = response.text;
      if (responseText == null) {
        throw Exception('API response is null');
      }

      // JSON 파싱 및 Challenge 객체 생성
      final jsonResponse = jsonDecode(responseText);
      return Challenge(
        title: jsonResponse['title'] as String,
        seconds: jsonResponse['seconds'] as int,
      );
    } catch (e) {
      // API 호출 실패시 기본 챌린지 반환
      return challenges[Random().nextInt(challenges.length)];
    }
  }

  // 벌칙 목록
  final List<String> punishments = [
    '제자리 점프 20회 하기',
    '30초 동안 한 발로 서있기',
    '10초 동안 혀 내밀고 있기',
    '벽에 손으로 물구나무서기',
    '개구리처럼 5번 점프하기',
    '15초 동안 춤추기',
    '눈 감고 코 터치하기 10회',
    '20초 동안 웃지 않고 있기',
    '손으로 알파벳 모양 만들기',
    '동물 소리 3가지 내기',
    '거꾸로 말하기 도전',
    '손가락으로 코 만지고 뱅글뱅글 돌기',
  ];

  Future<String> getRandomPunishment() async {
    final random = Random();
    return punishments[random.nextInt(punishments.length)];
  }
}

```

자꾸 json 텍스트가 포함되어서 오류가남!  

파싱 문제,,

API 응답: ```json
I/flutter ( 7956): {
I/flutter ( 7956):   "title": "30초 동안 '아무거나' 라는 말을 5번 이상 하기",
I/flutter ( 7956):   "seconds": 30
I/flutter ( 7956): }

자꾸 이렇게 json이 들어가서 오류

json 제발빼!!!! 아무리 빼라고 프롬프트를 넣어도 빼질 않음 

……..

이걸로 해결 

```dart
   String cleanJson = responseText.trim();
      cleanJson =
          cleanJson
              .replaceAll("```json", "")
              .replaceAll("```", "")
              .trim(); // 불필요한 문자 제거

```

- 회고

재밌었습니다.. 

문제가 생기고 해결하는 과정에서 계속 반복되는 문제가 생기니 다음에 같은 문제가 생기면 

빠르게 해결 할수가 있어서 뭔가 퀘스트 깨는것같고 재밌었습니다 

항상 구현하고 싶은
